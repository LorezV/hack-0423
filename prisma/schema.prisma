generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  STUDENT
  DELEGATE
}

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  password   String
  type       UserType
  firstname  String
  lastname   String
  created_at DateTime @default(now())

  group_id Int?
  group    Group? @relation(fields: [group_id], references: [id])

  avatar         UserAvatar?
  tokens         Token[]
  posts          Post[]
  likes          Like[]
  favourites     Favourite[]     @relation(name: "favourite_user_source")
  voters         Favourite[]     @relation(name: "favourite_user_target")
  university     University?
  participations Participation[]
}

model UserAvatar {
  user_id Int    @unique
  user    User   @relation(fields: [user_id], references: [id])
  path    String
}

model Token {
  id                       Int      @id @default(autoincrement())
  access_token             String
  access_token_expired_at  DateTime
  refresh_token            String
  refresh_token_expired_at DateTime

  user_id Int
  user    User @relation(fields: [user_id], references: [id])
}

model City {
  id   Int    @id @default(autoincrement())
  name String

  universities University[]
}

model University {
  id      Int    @id @default(autoincrement())
  name    String @unique
  content String

  delegate_id Int  @unique
  delegate    User @relation(fields: [delegate_id], references: [id])
  city_id     Int
  city        City @relation(fields: [city_id], references: [id])

  avatar    UniversityAvatar?
  faculties Faculty[]
  events    Event[]
  images    UniversityImage[]
}

model UniversityAvatar {
  university_id Int        @unique
  university    University @relation(fields: [university_id], references: [id])
  path          String
}

model UniversityImage {
  id   Int    @id @default(autoincrement())
  path String

  university_id Int
  university    University @relation(fields: [university_id], references: [id])
}

model Faculty {
  id   Int    @id @default(autoincrement())
  name String @unique

  university_id Int
  university    University   @relation(fields: [university_id], references: [id])
  departments   Department[]
}

model Department {
  id   Int    @id @default(autoincrement())
  name String @unique

  faculty_id Int
  faculty    Faculty @relation(fields: [faculty_id], references: [id])
  flows      Flow[]
}

model Flow {
  id   Int    @id @default(autoincrement())
  name String @unique

  department_id Int
  department    Department @relation(fields: [department_id], references: [id])

  groups Group[]
}

model Group {
  id   Int    @id @default(autoincrement())
  name String @unique

  flow_id Int
  flow    Flow   @relation(fields: [flow_id], references: [id])
  users   User[]
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  content     String
  started_at  DateTime @default(now())
  finished_at DateTime @default(now())

  type_id       Int
  type          EventType  @relation(fields: [type_id], references: [id])
  university_id Int
  university    University @relation(fields: [university_id], references: [id])

  participations Participation[]
}

model EventType {
  id     Int    @id @default(autoincrement())
  name   String
  reward Int

  events Event[]
}

model Participation {
  id       Int     @id @default(autoincrement())
  approved Boolean @default(false)
  reward   Int

  user_id  Int
  user     User  @relation(fields: [user_id], references: [id])
  event_id Int
  event    Event @relation(fields: [event_id], references: [id])
}

model Post {
  id         Int      @id @default(autoincrement())
  title      String
  content    String
  created_at DateTime @default(now())

  author_id        Int
  author           User         @relation(fields: [author_id], references: [id])
  post_category_id Int
  post_category    PostCategory @relation(fields: [post_category_id], references: [id])

  likes  Like[]
  images PostImage[]
}

model PostImage {
  id   Int    @id @default(autoincrement())
  path String

  post_id Int
  post    Post @relation(fields: [post_id], references: [id])
}

model PostCategory {
  id   Int    @id @default(autoincrement())
  name String @unique

  posts Post[]
}

model Like {
  user_id Int
  user    User @relation(fields: [user_id], references: [id])

  post_id Int
  post    Post @relation(fields: [post_id], references: [id])

  @@unique([user_id, post_id])
}

model Favourite {
  source_id Int
  source    User @relation(fields: [source_id], references: [id], name: "favourite_user_source")

  target_id Int
  target    User @relation(fields: [target_id], references: [id], name: "favourite_user_target")

  @@unique([source_id, target_id])
}
